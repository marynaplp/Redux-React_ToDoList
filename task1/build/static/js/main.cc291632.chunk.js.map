{"version":3,"sources":["Task.jsx","CreateTaskInput.jsx","TasksList.jsx","App.jsx","index.js"],"names":["Task","id","done","text","onChange","onDelete","listItemClasses","classNames","className","type","defaultChecked","onClick","CreateTaskInput","state","value","handleChange","event","setState","target","handleTaskCreate","props","onCreate","this","Component","baseUrl","TasksList","tasks","fetchTasksList","fetch","then","res","ok","json","tasksList","newTask","Math","random","method","headers","body","JSON","stringify","response","Error","handleTaskStatusChange","updatedTasks","map","task","handleTaskDelete","filter","sortedList","slice","sort","a","b","key","App","ReactDOM","render","document","getElementById"],"mappings":"wOAmBeA,EAhBF,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAChCC,EAAkBC,IAAW,YAAa,CAAC,iBAAmBL,IACpE,OACE,wBAAKM,UAAWF,GACd,2BACEG,KAAK,WACLD,UAAU,sBACVE,eAAgBR,EAChBE,SAAU,kBAAMA,EAASH,MAE/B,0BAAMO,UAAU,mBAAmBL,GAC/B,4BAAQK,UAAU,wBAAwBG,QAAS,kBAAMN,EAASJ,QCkB3DW,E,4MA7BXC,MAAM,CACFC,MAAO,I,EAGXC,aAAe,SAAAC,GACd,EAAKC,SAAS,CACVH,MAAME,EAAME,OAAOJ,S,EAIxBK,iBAAkB,WACd,EAAKC,MAAMC,SAAS,EAAKR,MAAMC,OAC/B,EAAKG,SAAS,CAAEH,MAAO,M,uDAG3B,OACI,yBAAKN,UAAW,eACZ,2BAAOC,KAAK,OACZK,MAAOQ,KAAKT,MAAMC,MAClBV,SAAUkB,KAAKP,aACdP,UAAU,uBACX,4BAAQA,UAAU,uBACjBG,QAASW,KAAKH,kBADf,e,GAtBkBI,aCExBC,EACJ,sEAwGaC,E,4MArGbZ,MAAQ,CACNa,MAAO,I,EAMTC,eAAiB,WACnBC,MAAMJ,GACHK,MAAK,SAACC,GACL,GAAIA,EAAIC,GACN,OAAOD,EAAIE,UAGdH,MAAK,SAACI,GACL,EAAKhB,SAAS,CACZS,MAAOO,Q,EAIXZ,SAAW,SAAClB,GAOV,IAAM+B,EAAU,CACdjC,GAAIkC,KAAKC,SACTjC,OACAD,MAAM,GAGR0B,MAAOJ,EAAS,CACda,OAAO,OACPC,QAAS,CACP,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUP,KAEpBL,MAAK,SAAAa,GACN,IAAGA,EAASX,GAIV,MAAM,IAAIY,MAAM,wBAHhB,EAAKhB,qB,EAWXiB,uBAAyB,SAAA3C,GAKvB,IAAM4C,EAAe,EAAKhC,MAAMa,MAAMoB,KAAI,SAAAC,GACxC,OAAIA,EAAK9C,KAAOA,EACP,2BACF8C,GADL,IAEE7C,MAAO6C,EAAK7C,OAGT6C,KAET,EAAK9B,SAAS,CAAES,MAAOmB,K,EAE3BG,iBAAmB,SAAC/C,GAIpB,IAAM4C,EAAe,EAAKhC,MAAMa,MAC/BuB,QAAO,SAAAF,GAAI,OAAIA,EAAK9C,KAAMA,KAC3B,EAAKgB,SAAS,CAAES,MAAOmB,K,kEAvEnBvB,KAAKK,mB,+BA0EG,IAAD,OACDuB,EAAa5B,KAAKT,MAAMa,MAC7ByB,QACAC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnD,KAAOoD,EAAEpD,QAE3B,OACE,yBAAKM,UAAU,aACb,kBAAC,EAAD,CAAiBa,SAAUC,KAAKD,WAChC,wBAAIb,UAAU,QACX0C,EAAWJ,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,eACEQ,IAAKR,EAAK9C,IACN8C,EAFN,CAGE1C,SAAU,EAAK2C,iBACf5C,SAAU,EAAKwC,mC,GA7FLrB,aCITiC,EARH,WACV,OACE,oCACA,wBAAIhD,UAAU,SAAd,aACA,kBAAC,EAAD,QCAJiD,IAASC,OACP,kBAAC,EAAD,MAEEC,SAASC,eAAe,U","file":"static/js/main.cc291632.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from \"classnames\";\n\nconst Task = ({ id, done, text, onChange, onDelete}) => {\n    const listItemClasses = classNames('list-item', {\"list-item_done\" : done}) ;// if done we will set or cancell list-item_done\n    return (\n      <li  className={listItemClasses}>\n        <input\n          type=\"checkbox\"\n          className=\"list-item__checkbox\"\n          defaultChecked={done}\n          onChange={() => onChange(id)}\n        />\n    <span className=\"list-item__text\">{text}</span>\n        <button className=\"list-item__delete-btn\" onClick={() => onDelete(id)}></button>\n      </li>\n    );\n};\n\nexport default Task","import React,{Component} from \"react\";\n\nclass CreateTaskInput extends Component {\n    state={\n        value: '',\n\n    }\n    handleChange = event=> {\n     this.setState({\n         value:event.target.value\n     })\n    \n    }\n    handleTaskCreate =() => {\n        this.props.onCreate(this.state.value);\n        this.setState({ value: \"\" });\n    }\n    render(){\n    return (\n        <div className =\"create-task\">\n            <input type=\"text\" \n            value={this.state.value}\n            onChange={this.handleChange}\n             className=\"create-task__input\" />\n            <button className=\"btn create-task__btn\"\n             onClick={this.handleTaskCreate}\n             >Create</button>\n        </div>\n    )\n}\n}\n\nexport default CreateTaskInput\n\n//1.take text from input\n//Create task with this text\n//Add creatted task to the list","import React, {Component} from \"react\";\nimport Task from \"./Task\"\nimport CreateTaskInput from \"./CreateTaskInput.jsx\";\n\nconst baseUrl =\n  \"https://5ecd23db7c528e00167cd104.mockapi.io/Projects/Gromcode/tasks\";\n\nclass TasksList extends Component {\n  state = {\n    tasks: [],\n  };\n  componentDidMount(){\n    this.fetchTasksList();\n  }\n  //create text with task\n  fetchTasksList = () => {\nfetch(baseUrl)\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n  })\n  .then((tasksList) => {\n    this.setState({\n      tasks: tasksList,\n    });\n  });\n  }\n  onCreate = (text) => {\n// for server\n//1.create task object\n//2.Post object to server\n// 3.fetch list from server\n    // get it with the help  descrutarisation\n   // const { tasks } = this.state;\n    const newTask = {\n      id: Math.random(),\n      text,\n      done: false,\n    };\n\n    fetch (baseUrl, {\n      method:\"POST\",\n      headers: {\n        'Content-Type': 'application/json; charset=utc-8'\n      },\n      body: JSON.stringify(newTask)\n\n    }).then(response => {\n      if(response.ok){\n        this.fetchTasksList()\n        // \n      } else {\n        throw new Error(\"Faild to create task\");\n    }\n      \n    })\n    //add to  list\n    // const updatedTasks = tasks.concat(newTask);\n    // this.setState({ tasks: updatedTasks });\n  };\n  handleTaskStatusChange = id => {\n    //   переключить задачу из виполненой в невиполнную и наоборот\n    //1.find task in the list\n    //2.Toggle done value\n    //3. Save updated list\n    const updatedTasks = this.state.tasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          done: !task.done,\n        };\n      }\n      return task;\n    });\n    this.setState({ tasks: updatedTasks });\n  };\nhandleTaskDelete = (id)=>{\n//1.filter tasks \n//2. Update state\n\nconst updatedTasks = this.state.tasks\n.filter(task => task.id !==id);\nthis.setState({ tasks: updatedTasks });\n}\n\n  render() {\n    const sortedList = this.state.tasks\n    .slice()\n    .sort((a, b) => a.done - b.done);\n\n    return (\n      <div className=\"todo-list\">\n        <CreateTaskInput onCreate={this.onCreate} />\n        <ul className=\"list\">\n          {sortedList.map((task) => (\n            <Task\n              key={task.id}\n              {...task}\n              onDelete={this.handleTaskDelete}\n              onChange={this.handleTaskStatusChange}\n              //id={task.id} text={task.text} done= {task.done}\n            />\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default TasksList \n","import React from \"react\";\nimport TasksList from \"./TasksList.jsx\"\n\nconst App = () => {\n  return(\n    <>\n    <h1 className=\"title\">Todo List</h1>\n    <TasksList />\n    </>\n  )\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from \"./App.jsx\"\n//import App from './App'; ?\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n  <App />, \n\n    document.getElementById('root')\n);"],"sourceRoot":""}